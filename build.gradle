buildscript {

    repositories {
        mavenCentral()

        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'com.github.johnrengelman:shadow:8.1.1'
    }
}

plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'idea'
}

import java.nio.file.Files
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING


apply from: LOGSTASH_CORE_PATH + "/../rubyUtils.gradle"

// ===========================================================================
// plugin info
// ===========================================================================
group                      'org.logstashplugins' // must match the package of the main plugin class
version                    "${file("VERSION").text.trim()}" // read from required VERSION file
description                = "Java filter used to remove arbitrary event fields, including nested fields, that match a list of values"
pluginInfo.licenses        = ['Apache-2.0'] // list of SPDX license IDs
pluginInfo.longDescription = "This gem is a Logstash plugin required to be installed on top of the Logstash core pipeline using \$LS_HOME/bin/logstash-plugin install gemname. This gem is not a stand-alone program"
pluginInfo.authors         = ['Garrett Simon']
pluginInfo.email           = ['gk.simon04@gmail.com']
pluginInfo.homepage        = "http://www.elastic.co/guide/en/logstash/current/index.html"
pluginInfo.pluginType      = "filter"
pluginInfo.pluginClass     = "RecursiveRemove"
pluginInfo.pluginName      = "recursive_remove" // must match the @LogstashPlugin annotation in the main plugin class
// ===========================================================================
java {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

repositories {
    mavenCentral()
    flatDir {
        dirs LOGSTASH_CORE_LIBS
    }
}

shadowJar {
    archiveClassifier = null
}
task sourcesJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    archiveClassifier = 'sources'
    archiveExtension = 'jar'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    archiveClassifier = 'javadoc'
    archiveExtension = 'jar'
}

configurations.create('sources')
configurations.create('javadoc')
configurations.archives {
    extendsFrom configurations.sources
    extendsFrom configurations.javadoc
}

artifacts {
    sources(sourcesJar) {
        // Weird Gradle quirk where type will be used for the extension, but only for sources
        type 'jar'
    }

    javadoc(javadocJar) {
        type 'javadoc'
    }
}

configurations {
    provided
}

project.sourceSets {
    main.compileClasspath += project.configurations.provided
    main.runtimeClasspath += project.configurations.provided
    test.compileClasspath += project.configurations.provided
    test.runtimeClasspath += project.configurations.provided
}
project.javadoc.classpath += project.configurations.provided

idea {
    module {
        scopes.PROVIDED.plus += [project.configurations.provided]
    }
}

// logstashCoreGemPath and logstashCoreEventGemPath comes from the gradle.properties file
// the gradle.properties file is built by the Rake task bundle_install
// See BUILD_INSTRUCTIONS.md
dependencies {
    provided group: "org.apache.logging.log4j", name: "log4j-api", version: "2.17.0"
    provided group: "org.apache.logging.log4j", name: "log4j-core", version: "2.17.0"
    provided 'org.jruby:jruby-core:9.2.20.1'
    provided 'org.apache.commons:commons-lang3:3.7'
    provided 'org.logstash:logstash-core:1.0.3'
    testImplementation 'junit:junit:4.13.1'
    testImplementation 'org.jruby:jruby-complete:9.2.20.1'
}

/*dependencies {
    implementation 'org.apache.commons:commons-lang3:3.7'
    compileOnly 'org.apache.logging.log4j:log4j-api:2.17.0' // provided by Logstash
    compileOnly 'org.apache.logging.log4j:log4j-core:2.17.0' // provided by Logstash
    implementation 'org.logstash:logstash-core:1.0.3'

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.jruby:jruby-complete:9.2.20.1'
    testImplementation 'org.logstash:logstash-core:1.0.3'
}*/

clean {
    delete "${projectDir}/Gemfile"
    delete "${projectDir}/" + pluginInfo.pluginFullName() + ".gemspec"
    delete "${projectDir}/lib/"
    delete "${projectDir}/vendor/"
    new FileNameFinder().getFileNames(projectDir.toString(), pluginInfo.pluginFullName() + "-?.?.?.gem").each { filename ->
        delete filename
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.register("vendor"){
    dependsOn shadowJar
    doLast {
        System.out.println("Hello World")
        String vendorPathPrefix = "vendor/jar-dependencies"
        String projectGroupPath = project.group.replaceAll('\\.', '/')
        File projectJarFile = file("${vendorPathPrefix}/${projectGroupPath}/${pluginInfo.pluginFullName()}/${project.version}/${pluginInfo.pluginFullName()}-${project.version}.jar")
        projectJarFile.mkdirs()
        Files.copy(file("$buildDir/libs/${project.name}-${project.version}.jar").toPath(), projectJarFile.toPath(), REPLACE_EXISTING)
        validatePluginJar(projectJarFile, project.group)
    }
}

tasks.register("generateRubySupportFiles") {
    doLast {
        generateRubySupportFilesForPlugin(project.description, project.group, version)
    }
}

tasks.register("removeObsoleteJars") {
    doLast {
        new FileNameFinder().getFileNames(
                projectDir.toString(),
                "vendor/**/" + pluginInfo.pluginFullName() + "*.jar",
                "vendor/**/" + pluginInfo.pluginFullName() + "-" + version + ".jar").each { f ->
            delete f
        }
    }
}

tasks.register("gem"){
    dependsOn = [downloadAndInstallJRuby, removeObsoleteJars, generateRubySupportFiles]
    doLast {
        buildGem(projectDir, buildDir, pluginInfo.pluginFullName() + ".gemspec")
    }
}
